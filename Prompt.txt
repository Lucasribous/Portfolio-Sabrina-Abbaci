J'ai renommé les images, j'ai changé dans package.json pour qu'il prenne le script optimize.js, Voici ma nouvelle arborescence :
.\.gitignore
.\eslint.config.js
.\index.html
.\optimize.js
.\package-lock.json
.\package.json
.\postcss.config.cjs
.\README.md
.\structure.txt
.\tailwind.config.cjs
.\vite.config.js
.\public\vite.svg
.\public\images\base\background.png
.\public\images\base\domestic-banana.png
.\public\images\base\header.png
.\public\images\base\left.png
.\public\images\base\les-paradis-artificiels.png
.\public\images\base\right.png
.\public\images\base\rubrique-love.png
.\public\images\optimized\background-1024.webp
.\public\images\optimized\background-1600.webp
.\public\images\optimized\background-320.webp
.\public\images\optimized\background-640.webp
.\public\images\optimized\domestic-banana-1024.webp
.\public\images\optimized\domestic-banana-1600.webp
.\public\images\optimized\domestic-banana-320.webp
.\public\images\optimized\domestic-banana-640.webp
.\public\images\optimized\header-1024.webp
.\public\images\optimized\header-1600.webp
.\public\images\optimized\header-320.webp
.\public\images\optimized\header-640.webp
.\public\images\optimized\left-1024.webp
.\public\images\optimized\left-1600.webp
.\public\images\optimized\left-320.webp
.\public\images\optimized\left-640.webp
.\public\images\optimized\les-paradis-artificiels-1024.webp
.\public\images\optimized\les-paradis-artificiels-1600.webp
.\public\images\optimized\les-paradis-artificiels-320.webp
.\public\images\optimized\les-paradis-artificiels-640.webp
.\public\images\optimized\right-1024.webp
.\public\images\optimized\right-1600.webp
.\public\images\optimized\right-320.webp
.\public\images\optimized\right-640.webp
.\public\images\optimized\rubrique-love-1024.webp
.\public\images\optimized\rubrique-love-1600.webp
.\public\images\optimized\rubrique-love-320.webp
.\public\images\optimized\rubrique-love-640.webp
.\src\App.css
.\src\App.jsx
.\src\index.css
.\src\main.jsx
.\src\components\BackgroundImages.jsx
.\src\components\Carrousel.jsx
.\src\components\Header.jsx
.\src\components\MarqueeText.jsx
.\src\components\ThreeSpans.jsx

En relançant via la commande npm run dev, aucune image n'apparait.
Voici le code de Header.jsx :
import React from "react";

export default function Header({ base = "/images/optimized/header", alt = "Header" }) {
  // base = "/images/optimized/header" -> header-480.webp, header-768.webp, header-1200.webp
  return (
    <header className="w-full flex justify-center py-6">
      <picture>
        <source
          srcSet={`${base}-480.webp 480w, ${base}-768.webp 768w, ${base}-1200.webp 1200w`}
          sizes="(max-width:640px) 100vw, (max-width:1024px) 80vw, 60vw"
          type="image/webp"
        />
        <img
          src={`${base}-768.webp`}
          alt={alt}
          className="max-w-xs sm:max-w-sm md:max-w-md lg:max-w-lg object-contain block"
          loading="lazy"
          decoding="async"
        />
      </picture>
    </header>
  );
}

Celui de MarqueeText.jsx :
import React, { useRef, useEffect, useState } from "react";

export default function MarqueeText({ text = "", pxPerSec = 80 }) {
  const containerRef = useRef(null);
  const measureRef = useRef(null);
  const [duration, setDuration] = useState(10);
  const [distance, setDistance] = useState(0);
  const [paused, setPaused] = useState(false);

  useEffect(() => {
    const compute = () => {
      const cw = containerRef.current?.offsetWidth || 0;
      const w = measureRef.current?.offsetWidth || 0;
      const travel = w + cw;
      const seconds = Math.max(3, travel / pxPerSec);
      setDistance(w); // déplacement d'une copie
      setDuration(seconds);
    };
    compute();
    const ro = new ResizeObserver(compute);
    if (containerRef.current) ro.observe(containerRef.current);
    if (measureRef.current) ro.observe(measureRef.current);
    return () => ro.disconnect();
  }, [text, pxPerSec]);

  const prefersReduced = typeof window !== "undefined" && window.matchMedia && window.matchMedia("(prefers-reduced-motion: reduce)").matches;

  return (
    <div
      ref={containerRef}
      className="w-full overflow-hidden py-3 border-t border-b"
      onMouseEnter={() => setPaused(true)}
      onMouseLeave={() => setPaused(false)}
      onFocus={() => setPaused(true)}
      onBlur={() => setPaused(false)}
      style={{ fontFamily: "Helvetica, Arial, sans-serif" }}
      aria-hidden={false}
    >
      <div ref={measureRef} aria-hidden="true" style={{ position: "absolute", left: -9999, top: -9999, whiteSpace: "nowrap", fontWeight: 700 }}>
        {text}
      </div>

      <div
        className="inline-flex whitespace-nowrap select-none"
        style={{
          animation: prefersReduced || paused ? "none" : `marquee ${duration}s linear infinite`,
          ["--t"]: `-${distance}px`,
        }}
      >
        <span className="font-bold text-lg mr-8" style={{ fontFamily: "Helvetica, Arial, sans-serif" }}>{text}</span>
        <span className="font-bold text-lg mr-8" aria-hidden="true" style={{ fontFamily: "Helvetica, Arial, sans-serif" }}>{text}</span>
      </div>

      <style>{`
        @keyframes marquee {
          0% { transform: translateX(0); }
          100% { transform: translateX(var(--t)); }
        }
      `}</style>
    </div>
  );
}

Celui de ThreeSpans.jsx :
import React from "react";

export default function ThreeSpans({ texts = [] }) {
  return (
    <section className="flex flex-col items-center gap-4 px-5 my-6 text-center" style={{ fontFamily: "Helvetica, Arial, sans-serif" }}>
      {texts.map((t, i) => (
        <p key={i} className="text-sm sm:text-base md:text-lg leading-6 max-w-3xl">
          {t}
        </p>
      ))}
    </section>
  );
}

Celui de BackgroundImage.jsx (que j'aimerais renommer Etoile.jsx afin d'éviter de confondre car j'aimerais ajouter un background au site et ce background est une image)
import React from "react";

/**
 * Props:
 *  - base: "/images/optimized/bg" -> bg-480.webp, bg-1024.webp, ...
 *  - alt: decorative -> alt=""
 *  - eager: boolean -> si true -> loading="eager" (hero important)
 */
export default function Background({ base = "/images/optimized/bg", eager = false }) {
  return (
    <picture aria-hidden="true" className="pointer-events-none">
      <source
        srcSet={`${base}-480.webp 480w, ${base}-1024.webp 1024w, ${base}-1600.webp 1600w`}
        sizes="100vw"
        type="image/webp"
      />
      <img
        src={`${base}-1024.webp`}
        alt=""
        className="fixed inset-0 w-full h-full object-cover -z-10"
        style={{ objectPosition: "center center" }}
        loading={eager ? "eager" : "lazy"}
        decoding="async"
      />
    </picture>
  );
}

Celui de Carrousel.jsx (que j'aimerais renommer Carousel.jsx pour avoir un nom international)
import { useEffect, useRef, useState } from "react";

/**
 * images props: [{ base: "/images/optimized/domestic_banana", alt: "...", link: "/page1" }, ...]
 */
export default function Carrousel({ images = [] }) {
  const [active, setActive] = useState(0);
  const ref = useRef(null);

  useEffect(() => {
    const el = ref.current;
    if (!el) return;
    const onScroll = () => {
      const idx = Math.round(el.scrollLeft / el.offsetWidth);
      setActive(idx);
    };
    el.addEventListener("scroll", onScroll, { passive: true });
    return () => el.removeEventListener("scroll", onScroll);
  }, []);

  if (!images.length) return null;

  return (
    <div className="relative w-full flex flex-col items-center mt-6">
      <div
        ref={ref}
        className="flex overflow-x-auto snap-x snap-mandatory scroll-smooth w-full max-w-md sm:max-w-2xl rounded-xl"
        style={{ WebkitOverflowScrolling: "touch" }}
      >
        {images.map((img, i) => (
          <div key={i} className="flex-shrink-0 w-full snap-center">
            <a href={img.link || "#"} className="block w-full">
              <picture>
                <source
                  srcSet={`${img.base}-480.webp 480w, ${img.base}-768.webp 768w, ${img.base}-1200.webp 1200w`}
                  sizes="(max-width:640px) 100vw, (max-width:1024px) 80vw, 60vw"
                  type="image/webp"
                />
                <img
                  src={`${img.base}-768.webp`}
                  alt={img.alt || ""}
                  className="w-full h-[70vw] sm:h-[24rem] object-cover rounded-xl"
                  loading="lazy"
                  decoding="async"
                />
              </picture>
            </a>
          </div>
        ))}
      </div>

      {/* dots */}
      <div className="flex gap-2 mt-3">
        {images.map((_, i) => (
          <button
            key={i}
            onClick={() => {
              const el = ref.current;
              if (!el) return;
              el.scrollTo({ left: i * el.offsetWidth, behavior: "smooth" });
            }}
            aria-label={`Aller à la diapo ${i + 1}`}
            className={`w-2 h-2 rounded-full focus:outline-none ${i === active ? "bg-black" : "bg-gray-300"}`}
            type="button"
          />
        ))}
      </div>
    </div>
  );
}

Celui de App.jsx :
import Header from "./components/Header";
import Marquee from "./components/MarqueeText";
import ThreeSpans from "./components/ThreeSpans";
import Carrousel from "./components/Carrousel";

export default function App() {
  const carrouselImages = [
    { base: "/images/optimized/domestic-banana", alt: "Domestic banana", link: "/page1" },
    { base: "/images/optimized/les-paradis-artificiels", alt: "Les paradis artificiels" },
    { base: "/images/optimized/rubrique-love", alt: "Rubrique Love", link: "/page3" },
  ];


  return (
    <div className="relative min-h-screen bg-white overflow-hidden">
      <Header imageSrc="/images/header.png" />
      <Marquee text="Sabrina Abbaci     Sabrina Abbaci     Sabrina Abbaci     " />
      <ThreeSpans
        texts={[
          "Étudiante en DNMADe Narration et Motion Design, je manie aussi bien les calques Photoshop que les refrains de mes artistes préférés. Mon terrain de jeu : l’image, le son, les univers visuels qui donnent une identité aux artistes.",
          "Ma spécialité ? Créer une narration graphique, un visuel qui fait danser autant qu’un bon drop électro. De la mise en page à mes prémices dans le motion, en passant par la création de chartes graphiques, je construis des passerelles entre la scène et l’écran.",
          "Ce qui me définit ? Un amour sincère pour la musique dans toutes ses diversités (rap, hyperpop, kpop, rnb, rock…), une énergie extravertie, et l’envie de mettre mon design au service de ma passion ; auprès d’artistes émergents comme confirmés. En résumé : je ne conçois pas de visuels sans bande-son."
        ]}
      />
      <Carrousel images={carrouselImages} />
    </div>
  );
}

Et le script optimize.js :
// optimize-images.js
import sharp from "sharp";
import fs from "fs";
import path from "path";

const inputDir = "./public/images";
const outputDir = "./public/images/optimized";

// Tailles cibles (tu peux en ajouter/enlever selon ton besoin)
const sizes = [320, 640, 1024, 1600];

// Création du dossier "optimized" si absent
if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir, { recursive: true });

function optimizeImages(dir) {
  fs.readdirSync(dir).forEach(file => {
    const inputPath = path.join(dir, file);
    const stat = fs.statSync(inputPath);

    if (stat.isDirectory()) {
      // Si c’est un sous-dossier (ex: /carrousel), on le traite aussi
      optimizeImages(inputPath);
    } else {
      const ext = path.extname(file).toLowerCase();
      const baseName = path.basename(file, ext);

      // On traite uniquement les PNG et JPG
      if (ext === ".png" || ext === ".jpg" || ext === ".jpeg") {
        sizes.forEach(size => {
          sharp(inputPath)
            .resize(size) // largeur cible
            .toFormat("webp", { quality: 80 })
            .toFile(path.join(outputDir, `${baseName}-${size}.webp`))
            .then(() => console.log(`✅ ${file} → ${baseName}-${size}.webp`))
            .catch(err => console.error(err));
        });
      }
    }
  });
}

// Lance l’optimisation
optimizeImages(inputDir);

À l'aide d'une réflexion profonde je veux que tu optimises chaque éléments au mieux pour avoir la meilleure compatibilité possible.
Une fois que toute la base est faite j'aimerais qu'on travaille sur la taille des images, le ratio et le CSS Car pour l'instant tout dépasse sur la droite de l'écran et le carrousel crop les images